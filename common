# Brew on Apple Silicon installs in /opt/homebrew
# For ccache: /opt/homebrew/opt/ccache/libexec

export PATH=$HOME/bin:/opt/homebrew/opt/ccache/libexec:/opt/homebrew/bin:/usr/local/go/bin:/usr/local/bin:/opt/homebrew/sbin:/usr/local/sbin:/snap/bin:/usr/bin:/usr/sbin:/bin:/sbin:/usr/gamse:/Library/TeX/texbin

# Vitis Path
export PATH=$PATH:/tools/Xilinx/Vitis/2021.1/bin

# Maybe this could have symlinks? /usr/local/CrossPack-AVR/bin:

# Wacky python pathery
export PATH=$HOME/.local/bin:$PATH
export PATH=/usr/local/opt/python@3.9/Frameworks/Python.framework/Versions/3.9/bin:$PATH

# Perl is stupid
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# If not running interactively, don't do anything else
[ -z "$PS1" ] && return

# If logging in via emacs/tramp, also no fancy prompts etc.
if [[ $TERM == "dumb" ]]; then
    export PS1="$ "
    return
fi

# If logging in via emacs/tramp, also no fancy prompts etc.
if [[ $TERM == "tmux-256color" ]]; then
    export TERM="xterm-256color"
fi

if [ "$0" = "/etc/X11/Xsession" ] ; then
    return
fi

# WTF is a Bourne Shell (sh) doing executing my fucking .bashrc?  Get your
# own goddamn .profile or whatever.  Fucking X11.  Man I hate X11.
mysh=$(ps -cp $$ -o command="")
if [[ ! -n "$BASH" ]] && [[ ! "${mysh}" == "zsh" ]] && [[ ! "${mysh}" == "-zsh" ]]
then
    echo "Zero is $0"
    echo "BASH is $BASH"
    echo "SHELL is $SHELL (which may not be the shell we are executing)"
    echo "ZSH is $ZSH"
    echo "mysh is $mysh"
    echo "Exiting because my shell isn't bash or zsh"
    exit 0
fi

name="$(uname)"
#if [[ "$name" != "Darwin" ]] && [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then

if [[ $name != "Darwin" ]]
then
    if [[ -x /usr/local/bin/gdate ]]; then
        DATE=/usr/local/bin/gdate
    else
        DATE=$(which date)
    fi
    start_time=$(${DATE} +%S.%N)
fi

# Shut up whiny perl program installers
export LANGUAGE=en_US.UTF-8
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Start an ssh agent
SSH_ENV="$HOME/.ssh/environment"
if [[ ! -S ~/.ssh/ssh_auth_sock ]]; then
    eval `ssh-agent`
    ln -sf "$SSH_AUTH_SOCK" ~/.ssh/ssh_auth_sock
fi
export SSH_AUTH_SOCK=~/.ssh/ssh_auth_sock
ssh-add -l | grep "The agent has no identities" && ssh-add


if [[ -f ~/.aliases ]]; then
    . ~/.aliases
fi

export EDITOR='emacs'
export LESS='-R --no-init --quit-if-one-screen'
export LESSOPEN='|~/.lessfilter %s'

export IPYTHONDIR='~/.ipython'
if [[ -f ~/.virtualenv/3/bin/activate ]]; then
    source ~/.virtualenv/3/bin/activate
else
    echo "Missing python virtualenv, yo."
fi

# don't put duplicate lines in the history. See bash(1) for more options
export HISTCONTROL=ignoredups
# ... and ignore same sucessive entries.
export HISTCONTROL=ignoreboth

# make less more friendly for non-text input files, see lesspipe(1)
[[ -x /usr/bin/lesspipe ]] && eval "$(lesspipe)"


# This is a message to iterm2 to set the badge
# Show the current session name and git branch, if any is set.
printf "\e]1337;SetBadgeFormat=%s\a" \
       $(echo -n "\(user.gitBranch)" | base64)

#export TERM=cathode
#If this is cathode, could set some primitive prompt.
#case "$TERM" in
#xterm*|rxvt*|cathode)
#     PROMPT_COMMAND='$ '
#     ;;
# *)
#     ;;
# esac

# Passwords and stuff could go here, just an API token as of 2015-10
if [ -r ~/.not-public ]; then
    source ~/.not-public
fi

# GRC lets a bunch of commands colorize their output
if [ -r /usr/local/etc/grc.bashrc ]; then
  GRC=/usr/local/etc/grc.bashrc
elif [ -r /etc/grc.bashrc ]; then
  GRC=/etc/grc.bashrc
elif [ -r $HOME/myDotfiles/grc.bashrc ]; then
  GRC=$HOME/myDotfiles/grc.bashrc
elif [ -r $HOME/github/myDotfiles/grc.bashrc ]; then
    GRC=$HOME/github/myDotfiles/grc.bashrc
fi

GRCBIN=$(which grc)
if [ -x "$GRCBIN" ]; then
  echo -n "$(tput setaf 1)r$(tput setaf 2)g$(tput setaf 4)b$(tput sgr0)"
  if [ ! -z "$GRC" ]; then
    source $GRC
  fi
else
  echo -n "monochrome"
fi

if [[ $name == "Darwin" ]]; then
  echo ""
else
  now=$(${DATE} +%S.%N)
  delta=`echo "3 k $now $start_time - p" | dc`
  echo " ${delta:0:4}"
fi

# if [[ -f ~/.autoenv/activate.sh ]]; then
#     source ~/.autoenv/activate.sh
# elif [ -x "$(command -v brew)" ]; then
#     if [[ -f "$BREW_PREFIX/autoenv/activate.sh" ]]; then
#         source "$BREW_PREFIX/autoenv/activate.sh"
#     fi
# fi
# export AUTOENV_ENABLE_LEAVE=yes

#eval "$(direnv hook bash)"

# llvm linking:

# llvm is keg-only, which means it was not symlinked into /usr/local,
# because macOS already provides this software and installing another version in
# parallel can cause all kinds of trouble.

# If you need to have llvm first in your PATH run:
# export PATH="/usr/local/opt/llvm/bin:$PATH"

# For compilers to find llvm you may need to set:
# export LDFLAGS="-L/usr/local/opt/llvm/lib"
# export CPPFLAGS="-I/usr/local/opt/llvm/include"

# To use the bundled libc++ please add the following LDFLAGS:
#LDFLAGS="-L/usr/local/opt/llvm/lib -Wl,-rpath,/usr/local/opt/llvm/lib"

if which swiftenv > /dev/null; then eval "$(swiftenv init -)"; fi

tmp=$(mktemp)
if command -v figlet > /dev/null 2>&1; then
    hostname -s | figlet >${tmp}
fi
if command -v lolcat > /dev/null 2>&1; then
    [[ -f ${tmp} ]] && lolcat <${tmp}
fi
rm -f ${tmp}

if command -v weather > /dev/null 2>&1; then
    # If the (external) network is apparently up, get the weather.
    if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
        weather
    fi
fi

#CPU Temp
# figlet "CPU Temp" | lolcat
# osx-cpu-temp | figlet | lolcat

# Add RVM to PATH for scripting. Make sure this is the last PATH variable change.
export PATH="$PATH:$HOME/.rvm/bin"

# Make git fetch/push work with .ssh/configs
export GIT_SSH_COMMAND=ssh

# make journalctl not stupid
export SYSTEMD_LESS=FRXMK

# Local Variables:
# mode: sh
# End:
