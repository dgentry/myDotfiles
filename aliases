# -*- Mode: sh -*-

# "source" this from an executable shell script to get a "msg"
# function that is better than plain "echo."
#
# msg attributes the messages to the "calling" script, plus the
# messages are colorized on color terminals.
#
# It provides log level names in colored/emphasized text.  For example:
# msg "${info}Some useful info"

myname=aliases

msg() {
    if [[ " "$SUPER_QUIET != True ]]; then
        printf "$bldblu${myname}: ${txtrst}$1\n"
    fi
}

# Variables for colors/contrast
if [[ $TERM == *"color"* ]]; then
    txtund=$(tput sgr 0 1)          # Underline
    txtbld=$(tput bold)             # Bold
    bldred=${txtbld}$(tput setaf 1) #  red
    bldblu=${txtbld}$(tput setaf 4) #  blue
    bldwht=${txtbld}$(tput setaf 7) #  white
    txtrst=$(tput sgr0)             # Reset
else
    txtund="_"
    txtbld="*"
    bldred=""
    bldblu=""
    bldwht=""
    txtrst=""
fi
info="${bldwht}*${txtrst}"
pass="${bldblu}*${txtrst}"
warn="${bldred}*${txtrst}"
ques="${bldblu}?${txtrst}"

# Get shellcheck to shut up about these being unused
echo "$txtund $info $pass $warn $ques" >/dev/null

#
# Hosts
#

# Would be better for these to be evaluated at invocation time
#[[ $wiredip = 172.31.* ]] && alias shed='ssh -p 23 gentry@ssh.surlycat.com'
alias ssh='ssh -A'
alias atom='ssh -A atom.lan'
alias beast='ssh -A surlycat.zapto.org'
alias beag='ssh -A gentry@beaglebone.lan'
alias bert='ssh -A bert'
alias bigbook='ssh -A gentry@bigbook.lan'
#alias boo='ssh -A boo.lan'
alias boo='ssh -A boofles.zapto.org'
alias boofles='ssh -p 80 -A boofles.zapto.org'
alias crappo='ssh -A crappo.lan'
alias p1='ssh -A auclyoctop1'
# Again, these should totally be evaluated at invocation time
if [[ $(hostname) == "noo.l"* ]]; then
    alias dev='ssh -A -p 2222 localhost'
    alias p08='ssh -A -p 2222 localhost'
    alias p03='ssh -A -p 2222 localhost'
    alias p1='ssh -A -p 2222 localhost'
    alias dev='ssh -A -p 2222 localhost'
    alias p08='ssh -A auclyoctop08-dev'
    alias p03='ssh -A auclvschemp03'
fi
alias chem='ssh-keygen -f ~/.ssh/known_hosts -R vschem.local ; ssh -o "StrictHostKeyChecking=no" root@vschem.local'
alias chem2='ssh-keygen -f ~/.ssh/known_hosts -R vschem-2.local ; ssh -o "StrictHostKeyChecking=no" root@vschem-2.local'
alias ricardo='ssh -A auclricardop1'
alias movies='ssh -A gentry@movies.lan'
alias octo='ssh -A octo.lan'
alias pitch='ssh -A pitch.zapto.org'
alias pi4='ssh -A pi4.lan'
alias pudly='ssh -A pudly.lan'
alias surly='ssh -A gentry@surlycat.zapto.org'
alias tiny='ssh -A gentry@tiny.zapto.org'
alias tinycat='ssh -A tinycat.lan'
alias tinycow='ssh -A tinycow.lan'
alias fleet='pushd ~/myDotfiles/ansible && ansible-playbook --ask-become fleet.yaml ; popd'
alias fleez='pushd ~/myDotfiles/ansible && ansible-playbook --ask-become zup.yaml ; popd'

alias emacs="emacs -nw"
#
# Mac/Linux Specific Stuff
#
if [[ `uname` == 'Darwin' ]]; then
  # enable color support of ls and also add handy aliases
  alias ls='ls -FG'	       # On Mac OS
  #wiredip=`ifconfig en0 | grep 'inet ' | cut -f2 -d' '`
  alias upgrade='brew update && brew upgrade && brew cleanup'
  alias packages="brew leaves"
  alias df='df -P -h'  # omit annoying inodes and report in human units

  if [[ $(sw_vers -productVersion) == "10.13.6" ]]; then
      emacs_path="/Applications/Emacs.app/Contents/MacOS/Emacs"
      if [[ -x $emacs_path ]]; then
	  alias emacs="$emacs_path -nw"
      else
	  msg "On High Sierra but no Emacs app"
      fi
  fi
fi


#
# Linux Specific Stuff most likely
#
if [[ `uname` != 'Darwin' ]]; then
  #wiredip=`ifconfig eth0 | grep 'inet ' | cut -f2 -d' '`
  eval "`dircolors -b`"
  alias agi='sudo apt-get install -y'
  alias bap='sudo apt-get update \
               && sudo apt-get -y --with-new-pkgs upgrade \
               && sudo apt-get -y autoremove'
  alias df='df -xsquashfs -xtmpfs'  # omit annoying "snaps" and tmp filesystems
  alias dir='ls --color=auto --format=vertical'
  alias ios='iostat 5 -m | grep -v loop'
  alias ls='ls -F --color=auto'  # List files with symbols (/ * @) and colors
  alias lsblk='lsblk | grep -v \/snap\/'     # omit annoying "snaps"
  alias open=xdg-open
  alias package-purge="dpkg --list |grep \"^rc\" | cut -d \" \" -f 3 | xargs sudo dpkg --purge"
  alias packages-all="dpkg-query --show --showformat='\${Installed-Size}\t\${Package}\n' | sort -rh | head -25 | awk '{print \$1/1024, \$2}'"
  # Filter out packages whose status isn't "installed"
  alias packages="dpkg-query --show --showformat='\${Installed-Size} \${Package} \${db:Status-Status}\n' | grep 'installed\$' | sort -rh | head -25 | awk '{print \$1/1024, \$2}'"
  # List installed linux-images.  As it turns out, there's already "linux-version list"
  alias linuxes="dpkg-query --show --showformat='\${Installed-Size} \${Package} \${db:Status-Status}\n' 'linux-image-[0-9]*' | grep 'installed$' | cut -f2 -d' ' | cut -f3- -d'-'"
  alias mylinux="uname -r"
  alias provides="dpkg -S"
  alias sethostname="hostnamectl set-hostname"
  alias upgrade='apt-get update && apt-get upgrade && apt-get clean'
  alias vdir='ls --color=auto --format=long'
  alias mount='mount -t nfs,nfs4,cifs,smbfs,ext4,ext3,xfs,btrfs,vfat,fat32,ntfs,iso9660,udf'
fi

alias whatsup='nmap -sP 192.168.1.1/24'
#alias myip="dig TXT +short o-o.myaddr.l.google.com @ns1.google.com | awk -F'\"' '{print \$2}'"
alias myip="curl https://ipinfo.io/ip"
if [[ -f ${HOME}/.location ]]; then
    alias myloc="cat ${HOME}/.location"
else
    alias myloc="curl -s https://ipinfo.io/ | python -c \"import sys, json; d=json.load(sys.stdin); print('{}, {}'.format(d['city'].replace(' ','+'), d['region'][0:2]))\""
fi

# fileage_s() {
#     ss=$(($(date +%s) - $(date +%s -r $1)))
#     let "m = $ss / 60"
#     let "s = $ss - $m * 60"
#     echo -n "${m}m ${s}s"

# }

# fileage() {
#     ss
#     =$(($(date +%s) - $(date +%s -r $1)))
#     let "m = $ss / 60"
#     let "s = $ss - $m * 60"
#     echo -n "${m}m ${s}s"
# }

# weatherf=${HOME}/.weather


# weather() {
#     if [[ -f ${weatherf} ]] && [[ fileage ${; then
#         fileage ${weatherf} && echo -n ": " && cat ${weatherf};
#     else
#         MYLOC=$(myloc) && figlet "$MYLOC" | lolcat
#         curl --silent wttr\.in/"\$MYLOC?0?A?u" | grep -v "Weather repo" | tee > ${weatherf}
#     fi
# }


alias la='ls -alf'
alias l='ls -lAh --color'
alias lr='ls -R | grep ":$" | sed -e '\''s/:$//'\'' -e '\''s/[^-][^\/]*\//--/g'\'' -e '\''s/^/   /'\'' -e '\''s/-/|/'\'''
alias mv='mv -i'             # Interactive confirmation before move
alias rm='rm -i'             # Interactive confirmation before delete
alias cp='cp -ip'            # Confirm before overwrite; preserve timestamp

# Whoa.
function wikipedia() {
    if [ "${1}" ]; then dig +short +TXT "${1}".wp.dg.cx; fi
}

alias freq='cut -f1 -d" " ~/.bash_history | sort | uniq -c | sort -nr | head -n 30'

alias clean="find . \( -name \*~ -or -name build \) -print -exec rm -rf {} \;"

alias ccat='pygmentize -O bg=dark'

#
# Remote control
#

alias wget='wget --content-disposition'
# Follow redirects
alias curl='curl -L'

# Usage: fixhost <host with unknown key>
alias fixhost="ssh-keygen -f ~/.ssh/known_hosts -R"

alias spssh="stty -echo; printf \"Pw: \"; read PASS; stty echo; echo \"\"; echo \"${PASS}\" | pssh -t 800 -h ~/.not_public.d/hosts -i --"
alias pssh="pssh -t 800 -h ~/.not_public.d/hosts -i --"
function sssh() {
    ssh -t "$1" 'tmux attach || tmux new || screen -DR'
}

function authme() {
  ssh "$1" 'mkdir -p ~/.ssh && cat >> ~/.ssh/authorized_keys' \
    < ~/.ssh/id_ed_25519.pub
}


#
# Backup/Rsync Stuff
#

# Rsync the arg to movies
function bkp() {
    rsync --verbose --stats --progress \
	--archive --compress \
	--exclude=gentry/Library/Caches \
        --exclude=gentry/Library/Application\ Support/Google/Chrome/Default/Cache \
	--exclude=gentry/.Spotlight-V100 \
	--exclude=gentry/.fseventsd \
	--delete --delete-excluded --delete-after \
	--ignore-errors \
	--partial-dir=.rsync-partial  \
	"$1" movies.lan:more/
}

function bkp_audio() {
    rsync -av ~/Audio/ gentry@movies.lan:more/Audio/
}

function rsyncp() {
    rsync -av --partial --stats --progress "$1" "$2"
}

# Like cp, but maybe more preservey
function tarcopy() {
    tar -cpSf - "$1" | tar -xpSf - --keep-newer-files -C "$2";
}

function tarcp() {
    tar cpf - ${1} | (cd ${2} && tar xpf -)
}

# cd into the source directory first so it extracts over (merges) the
# destination, but don't overwrite newer files there.
function tarmerge() {
    tar -cpSf - -C "$1" . | tar -xpSf - --keep-newer-files -C "$2";
}

alias e="emacs -nw"
alias update-emacs="emacs --batch -l ~/.emacs.d/init.el -f auto-package-update-now"
alias today="emacs -nw ~/txt/todo/today.org"

# VNC stuff
# One-time VNC of existing desktop:
alias vncme='x11vnc -rfbauth ~/.vnc/passwd -shared -noxdamage'
# VNC Server
alias vncs='vncserver -geometry 1920x1200'
alias vncp='vncserver :1 -geometry 1024Ã—768 -depth 16 -pixelformat rgb565'
alias startvnc='sudo /usr/bin/x11vnc -xkb -auth /var/run/lightdm/root/:0 -noxrecord -noxfixes -noxdamage -rfbauth /etc/x11vnc.pass -forever -bg -rfbport 5900 -display :0 -o /var/log/x11vnc.log'
alias stopvnc='x11vnc -display :0 -remote stop'

# Spice stuff
alias ltspice='wine ~/.wine/drive_c/Program\ Files/LTC/LTspiceIV/scad3.exe'
alias netlistviewer='wine ~/.wine/drive_c/Program\ Files/NetlistViewer/NetlistViewer.exe'

# Disk space
alias ducks='du -cks .* * | sort -rn | head -11'
alias dur='du -sm * | sort -n'

# History
alias hs='history | grep --color=auto'
alias h=history

# Keyboard
alias swapcap='setxkbmap -layout us -option ctrl:nocaps'
alias swapcaps='setxkbmap -layout us -option ctrl:nocaps'

#function psg() { /bin/ps auxww | egrep -i (PID|"$1")" ;}
alias psg="/bin/ps auxww | grep -v grep | grep -i"

# Where's that name?  Skip .git directories.
function wtn() {
    find . -path .git -prune -o -name "${1}" -type f -print
}


# Where's that found? (grep all files in current directory tree)
function wtf() {
    find . -path ./.git -prune -o -type f -exec grep -in "${1}" {} /dev/null \;
}

# Where's That Found, only python files.
function wtfpy() {
    find . -path ./.git -prune -o -name \*.py -exec grep -in "${1}" {} /dev/null \;
}

# Mac Watching network and disk stuff
alias apfsuck='sudo tmutil listlocalsnapshots / | cut -f4 -d. | xargs -n 1 tmutil deletelocalsnapshots'

spy() { lsof -i -P +c 0 +M | grep -i "$1"; }
alias netlisteners='lsof -i -P | grep LISTEN'
alias sniff="sudo ngrep -d 'en0' -t '^(GET|POST) ' 'tcp and port 80'"
alias dskload="ps faux|awk '\$8 ~ /D/{print}'"
alias ports="sudo lsof -i"
alias ports2="sudo netstat -lptu"
alias ports3="sudo netstat -tulpn"
alias swaptop="find /proc -maxdepth 2 -path \"/proc/[0-9]*/status\" -readable -exec awk -v FS=\":\" '{process[\$1]=\$2;sub(/^[ \t]+/,\"\",process[\$1]);} END {if(process[\"VmSwap\"] && process[\"VmSwap\"] != \"0 kB\") printf \"%10s %-30s %20s\n\",process[\"Pid\"],process[\"Name\"],process[\"VmSwap\"]}' '{}' \; | awk '{print \$(NF-1),\$0}' | sort -h | cut -d \" \" -f2-"

alias aliases='pushd ~/myDotfiles && git sync && emacs -nw aliases && popd && source ~/.aliases && echo "run uda if the alias turns out to be useful."'
alias realias='source ~/.aliases'
alias uda='pushd ~/myDotfiles && git sync && git commit aliases -m "Auto-updated aliases" && git sync && source aliases && popd'

alias hs='history | grep --color=auto'
alias h=history


#
# Git stuff
#

alias github="chrome \`git remote -v | grep github.com | grep fetch | head -1 | field 2 | sed 's/git:/http:/g'\`"

# status, colorized, with branch name
alias gs="git branch && (git -c color.status=always status | sed 's/On branch .*//')"
alias gd='git diff'

# Git logs
alias gl="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias gsl='git shortlog -nsw -e'
# Add -all on these to get history of main branch you're not currently on
alias gitlog='git log --graph --format=format:'\''%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'\'''\''          %C(white)%s%C(reset) %C(bold white)â€” %an%C(reset)'\'' --abbrev-commit'
alias lg='git log --graph --full-history --color --pretty=format:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s"'
alias gh='git hist'
alias ga='git add'
alias gp='git pull && git push'
alias gc='git commit'
alias gk='git checkout'
alias grm='git rm'
alias co='git checkout'
alias master='git checkout main'
alias main='git checkout main'
alias adclean='rm -rf ${HOME}/Projects/vetscan-chem-instrument/meta-adlink-nxp/scripts/lib/wic/plugins/source/__pycache__/'

function gbranches() {
    git branch -a | grep -v 'remotes/origin/HEAD' | grep "remotes/origin" | sed 's:remotes/origin/::'
}
function git_branch() {
    git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1:/'
}

# If you copy the filenames from a git status, degit() will make them
# suitable for use on the command line.
function degit() {
    pbpaste | sed s/modified://g | sed s/deleted://g | tr -d "\n";
}
# dgit() will do the same thing (better) from "file" for remote "pbpaste."
function dgit() {
    cat file | sed "s/new file://g" | sed s/modified://g | sed s/deleted://g | tr -d "\n";
}
function gcg() {
    git clone git@github.com:${1}
}

# List exactly git conflict files
alias conflicts='git diff --name-only --diff-filter=U'
alias conflictr='git diff --name-only --diff-filter=U  --relative'

alias rmpasted='pbpaste | xargs rm -f'

alias stripcolor="sed -r \"s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]//g\""

# Quick git commit.  This is a terrible idea.
function m() {
  git add . -A
  if [ -z "$1" ]; then
      N=0
      COMMITS=('Bugfix' 'Formatting/style fixup' 'Docs only' 'Misc development work')
      for i in "${COMMITS[@]}"
      do
        N=`expr $N + 1`
        echo "[${N}] ${i}"
      done

      read -r selection

      MESSAGE=${COMMITS[selection]}
      echo "${MESSAGE}"
      git commit -m "${MESSAGE}"
    else
      echo 'other'
      git commit -m "$1"
  fi
}


# Swift
alias swift="nocorrect swift"

#
# Python Stuff
#

# Choose python venv
alias p2="deactivate 2>&1 >/dev/null; source ~/.virtualenv/v/bin/activate"
alias p3="deactivate 2>&1 >/dev/null; source ~/.virtualenv/3/bin/activate"
alias pc="deactivate 2>&1 >/dev/null; source ~/.virtualenv/3c/bin/activate"

alias pudb='python -m pudb'

# Python command-line tools/oneliners
alias json="python -mjson.tool"
alias miniterm="python -m serial.tools.miniterm --raw"
alias randport="python -c \"import random; print(random.randint(2048,65000))\""
alias servethis="python3 -m http.server"
alias byteorder="python -c 'import sys; print(sys.byteorder)'"

function printxml() {
    cat "$@" | python -c "import sys; from xml.dom.minidom import parse; print parse(sys.stdin).toprettyxml(indent='  ')"
}

# These should probably pay attention to a tox.ini or other python config files
function autopep() {
    autopep8 -a --max-line-length=99 --diff "$@" | pygmentize -l diff | less
}

function autopepit() {
    autopep8 -a --max-line-length=99 --in-place "$@"
}

# Yocto
alias lsimage='ls -lt ${YOCTO}/chem-yoctotmp-kirkstone/deploy/images/*/*-202*.wic.*z* \
                      ${YOCTO}/chem-yoctotmp-kirkstone/deploy/images/*/*-202*.bmap'

alias pv='cd ~/Projects/vetscan-chem-instrument'
alias iu='cd ~/Projects/vetscan-chem-instrument'
alias mu='cd ~/Projects/vetscan-chem-mu-software'
alias platform='cd ~/Projects/vetscan-platform'
alias ius='cd ~/Projects/vetscan-chem-instrument/meta-chem/recipes-comm/vschem-iu/vschem-iu/src'
alias pvd='cd ~/Projects/vetscan-chem-instrument/build \
             && source ../poky/oe-init-build-env . \
             && bitbake -k chem-dev-image chem-dev-update-image'
alias pvs='scripts/send-image-to boofles.zapto.org:80 && ssh -p 80 boofles.zapto.org swupdate-one-chem.sh t14.local cdi-tmp/\*.swu'
alias latest='ls -t /mnt/yocto/artifacts/IU-0.90.0 | head | grep \(main\)'

# Should probably look for .projectile or ~/Projects or .git or something
check_directory() {
    if [[ $(pwd) == *"kirkstone"* ]]; then
        echo "kirkstone"
    else
        echo "vetscan-chem-instrument"
    fi
}

function bb() {
    projdir=$(check_directory)
    echo "Bitbaking for $projdir"
    pushd ~/Projects/$projdir/build
    source ../poky/oe-init-build-env .
    rm -f bitbake.lock
    msg "Executing bitbake -k $@"
    bitbake -k "$@"
    popd
}


alias fetch="bbf fetch $@"
alias configure="bbf configure $@"
alias compile="bbf compile $@"
alias deploy="bbf deploy $@"
alias image="bb chem-dev-image"
